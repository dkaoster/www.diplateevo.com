<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Diplateevo</title>
        <link>https://www.diplateevo.com</link>
        <description>A blog, by Daniel Kao</description>
        <lastBuildDate>Tue, 17 Jan 2023 04:03:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>SvelteKit</generator>
        <image>
            <title>Diplateevo</title>
            <url>https://www.diplateevo.com/cover-default.jpg</url>
            <link>https://www.diplateevo.com</link>
        </image>
        <copyright>Copyright 2023, Diplateevo</copyright>
        <atom:link href="https://www.diplateevo.com/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[ScrollyVideo.js]]></title>
            <link>https://www.diplateevo.com/scrollyvideo</link>
            <guid>https://www.diplateevo.com/scrollyvideo</guid>
            <pubDate>Mon, 16 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[You’ve probably seen it in a fancy visual journalism piece from a well-known media organization: the scrolling video.]]></description>
            <content:encoded><![CDATA[<p>You’ve probably seen it in a fancy visual journalism piece from a well-known media organization: the scrolling video. On first thought, it seems simple enough: use Javascript to figure out how far down the page the user has scrolled, and programmatically move the playhead of the video to the appropriate point so that the video reacts to the user’s scroll event.</p><div class="video-wrap full svelte-i9k1x7"><video alt="video" src="/media/2023/01/scrollyvideo-1.mp4" className="full" autoplay muted loop playsinline preload="metadata" class="svelte-i9k1x7"></video>  </div><p>But it’s not that easy (discussed below), and I’m finally <a target="_blank" rel="noopener noreferrer" href="https://scrollyvideo.js.org/">releasing an open source library</a> with components in React, Svelte, Vue, and vanilla javascript to make scrolling video projects easier. Early versions implementations can be seen in <a target="_blank" rel="noopener noreferrer" href="https://web.cw.com.tw/tra-train-crash/">projects I did for Commonwealth Magazine</a>, or even in <a target="_blank" rel="noopener noreferrer" href="https://www.propublica.org/article/bluestone-jim-justice-north-birmingham">this ProPublica report</a>. This was a project sitting under wraps for nearly year, as it got lost under much of my other day-to-day responsibilities. I finally found the time to clean up the documentation, test different frameworks, and get this project out the door.</p><h2 id="currenttime">CurrentTime</h2><p>Unfortunately, video formats were never designed with this use case in mind, and will often take seconds or longer to load the frame under normal circumstances. Used in a scrolling video, this results in a horribly choppy experience. The reason this happens is videos are typically encoded using keyframes set every 30 frames or so. In videos, keyframes are frames that contain the pixel data for the entire frame, whereas frames that are not keyframes only hold the “difference” between this frame and the last frame. Having frames only encode frames that have changed allows the video to be compressed to a smaller size, as most videos are only expected to be played forwards.</p><div class="image-wrap full svelte-mg7n3x"><img loading="lazy" alt="Keyframes allow video frames to only store the difference from frame to frame." src="https://www.diplateevo.com/images/2023/01/keyframes.png" width="100%" class="svelte-mg7n3x">  <div class="caption svelte-mg7n3x">Visualizing a video frame simply storing the difference between frames.</div></div><p>Therefore, when it comes to exporting video for a “scrolly” use case, the recommendation is to export it with the setting keyframes=1, which tells the encoder that every single frame is a keyframe. While this solves our problem of allowing the video to dynamically load the right frame of the video much faster, it also causes the size of the video file to increase significantly, all other settings being equal. In my experience, going down this path will result in re-exporting the video multiple times while adjusting the quality setting to find a compromise between file size and video quality, which is not ideal.</p><h2 id="playbackrate">PlaybackRate</h2><p>After experimenting with this method for a while, I found a second approach: simply playing and pausing the video while dynamically adjusting the <a target="_blank" rel="noopener noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate">playback rate</a>. If you’ve ever played around with video player settings, you’ll know that videos on the web often have the option of changing the playback speed of the video, allowing you to power through a lecture at two or three times speed. In fact, most web browsers support up to eight times speed, a speed that I have no honest idea when one would actually want to use in real life. Using playback rate, I can essentially mimic the effect of a user scrolling fast or slow, while relying on the video player to decode the frames in order, making the forward scrolling experience extremely smooth.</p><p>However, the catch with this method is that playback rate cannot be a negative number, so scrolling backwards must still be done with the first method above. Theoretically you could export an identical video in reverse and have two video elements that show or hide depending on the scroll direction, but scrollyVideo.js currently does not support this option. Additionally, Safari for some reason is less performant using this approach than the one above, so this library detects Safari and forces it to use the first method.</p><h2 id="webcodecs">WebCodecs</h2><p>The final approach I stumbled across was using the <a target="_blank" rel="noopener noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API">WebCodecs API</a> to convert a video into individual frames in the browser. Unfortunately, WebCodecs is <a target="_blank" rel="noopener noreferrer" href="https://caniuse.com/webcodecs">only supported in Chrome</a> at the moment, with no estimated release in any of the other browsers. And while I did <a target="_blank" rel="noopener noreferrer" href="https://github.com/ennuicastr/libavjs-webcodecs-polyfill">find a polyfill for WebCodecs</a>, I was unable to get it working with ScrollyVideo, so this method is limited to Chromium-based browsers only.</p><p>Essentially, by reading all the frames from a video ahead of time, this method is able to have any possible frame immediately ready for painting to a canvas. The downside? It takes a bit of time before the video is fully processed, so any immediate usage of this method will likely fall back to one of the earlier ones. Going this route also requires more memory and processing power, something that lower-end android devices may not handle well.</p><h2 id="additional-use-cases">Additional Use Cases</h2><p>For more creative use cases, scrolling may not be the only way that a project may want to control the playback and position of a video. Perhaps you want to control the position of the video based on mouse movement or something else. By exposing <code>setCurrentTimePercent</code> from the library, you can also directly set the position the video.</p><div class="video-wrap full svelte-i9k1x7"><video alt="video" src="/media/2023/01/scrollyvideo-2.mp4" className="full" autoplay muted loop playsinline preload="metadata" class="svelte-i9k1x7"></video>  </div><h2 id="frameworks">Frameworks</h2><p>That said, the implementation of this project was built with a vanilla javascript installation in mind, with all the logic living inside <a target="_blank" rel="noopener noreferrer" href="https://github.com/dkaoster/scrolly-video/blob/main/src/ScrollyVideo.js">ScrollyVideo.js</a>. The React, Svelte, and Vue components are simply wrappers around the plain javascript implementation, which turns out to be much easier than trying to create a WebComponent.</p><p>That said, I’m looking forward to seeing this in the wild, and if you have any further questions, find any bugs, or want to contribute, feel free to reach out and I’m happy to talk!</p>]]></content:encoded>
            <enclosure url="https://www.diplateevo.com/images/2023/01/scrollyvideo.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Thoughts on Journalistic Cartography]]></title>
            <link>https://www.diplateevo.com/journalistic-cartography</link>
            <guid>https://www.diplateevo.com/journalistic-cartography</guid>
            <pubDate>Wed, 11 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[News events of last year have resulted in a large variety of journalistic maps, which have become an indispensable part of reporting and helping readers understand the situation on the ground.]]></description>
            <content:encoded><![CDATA[<p>One of the reasons I look forward to the end of the year is seeing all the year in reviews that different news organizations publish. Whether it be a collection of photos from the year, most popular articles, or the <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/12/28/us/2022-year-in-graphics.html">year in graphics</a>, these summaries provide a reminder of the news events and journalistic storytelling that were published, and the creative approaches that were built upon or invented in the past year.</p><p>News events of last year have resulted in a large variety of journalistic maps, which have become an indispensable part of reporting and helping readers understand the situation on the ground. These maps have helped readers understand the <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/world/europe/ukraine-maps.html">war in Ukraine</a>, the <a target="_blank" rel="noopener noreferrer" href="https://web.cw.com.tw/taiwan-strait-2021-en/index.html">tensions in the Taiwan Strait</a>, the <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/12/13/climate/climate-footprint-map-neighborhood.html">effects of climate change</a>, the <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/11/16/us/elections/republicans-house-congress.html">political divides across the US</a>, and so much more.</p><p>The tools for creating these maps and the conventions for creating interactive and understandable maps have also made huge strides in the past couple years, enabling graphics teams to publish quickly and consistently. For those who work on news graphics day to day, this is not new information for us, but rather advancements that we simply take for granted or even forget their significance once we adapt them into our workflows. But for those who are trying to better understand the technical implementations, whether you a student, editor, or other play another role, this post is a discussion about the current state of things, some suggestions, and the challenges ahead.</p><p>Data and graphics journalism has, from its very inception, trodden the line between helping readers understand stories beyond what plain words can do without becoming too technical that only experts can understand. However, as trends change, what readers might understand or not understand changes, allowing for data and graphics teams to also push the envelope on what is a good, understandable piece of data or visual journalism.</p><h2 id="the-evolution-of-journalistic-cartography">The Evolution of Journalistic Cartography</h2><p>Ten years ago, The New York Times published <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/projects/2012/snow-fall/index.html">Snow Fall</a>, one of the earliest examples of visual storytelling on the web that would go on to <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/2022/12/23/insider/snow-fall-at-10-how-it-changed-journalism.html">win a Pulitzer Prize</a> and be widely regarded as the piece that started it all. As a college freshman at the time, I missed the publication of the piece and the resulting discourse around the report at the time, but looking back now it’s clear how far projects have come.</p><div class="video-wrap full svelte-i9k1x7"><video alt="video" src="/media/2023/01/snowfall.mp4" className="full" autoplay muted loop playsinline preload="metadata" class="svelte-i9k1x7"></video>  </div><p>Looking back at Snow Fall now, it’s striking how much of the visual assets were simply embedded into autoplaying, looping, silent videos. Today, while video is still a common format to build visual journalism pieces off of, there has been a trend toward browser rendering or vector formats and animations for better clarity, performance, and interactivity. The 3D topographical model of the mountain as seen in Snow Fall was only possible through rendering a video back in 2012, but today it would be trivial to do something similar in mapboxgl.js for far better performance and resolution, such as <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/10/04/climate/south-asia-monsoon-climate-change.html">this piece on the Monsoons in South Asia</a>.</p><p>Design-wise, we’ve also seen maps in news stories evolve to be clearer, better labeled to fit the stories, and colors and colors more carefully picked. Extraneous details are made grayscale or monochromatic, while critical pieces of information are given colors that are bright and clear. Animations and transitions are used sparingly but effectively to draw attention to important changes or layers of a story. Words are rendered by the browser whenever possible to make text accessible and clear. Legends are obvious and intuitive to help the reader understand any special lines or arrows on the map.</p><div class="image-wrap full svelte-mg7n3x"><img loading="lazy" alt="Ukraine Map by The New York Times" src="https://www.diplateevo.com/images/2023/01/nytimes-ukraine-map.png" width="100%" class="svelte-mg7n3x">  </div><p>Maps have also adapted to social media platforms, being exported in small, bite-sized pieces that are published to Facebook, Twitter, Instagram, where there is even less room for superfluous information. It’s often difficult enough to make sure a map is legible on both desktop and mobile, let alone also optimized for each social media platform. This is where graphics teams have developed all sorts of internal tools to handle the rapid iteration of news graphics, especially when a story may need to be updated live and shared across social media.</p><h2 id="svg-and-vectors">SVG and Vectors</h2><p>One of the most important tools for making dynamic, flexible graphics and maps is to keep things in a vector format as much as possible. Most of the time, this means using <a target="_blank" rel="noopener noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/SVG">SVGs (scalable vector graphics)</a> to display on webpages and mobile applications. SVGs, when rendered through an application, allow for rapid edits and updates. <a target="_blank" rel="noopener noreferrer" href="https://d3js.org/">D3</a>, the most widely used tool for data graphics on the web, primarily works by manipulating SVG objects, including <a target="_blank" rel="noopener noreferrer" href="https://github.com/d3/d3-geo">powerful functions for handling projections and drawing geospatial data</a>.</p><p>SVGs are attractive due to their platform-independent compatibility, such as being able to import an SVG map directly into print tools such as Adobe Illustrator, Indesign, etc. With computers and mobile devices getting more and more powerful, having maps rendered on the client is performant and has the sharpest visual appearance.</p><p>However, the challenge for SVG maps on the web is that geospatial data is most transferred as <a target="_blank" rel="noopener noreferrer" href="https://geojson.org/">geojson</a> or <a target="_blank" rel="noopener noreferrer" href="https://github.com/topojson/topojson">topojson</a>, which is not a particularly space-efficient format. Generating and transferring geojson files to handle a dynamic, interactive map is expensive, often resulting in files that are hundreds of megabytes, which is unacceptable for users on mobile connections.</p><p>One alternative to the geojson format that has gained popularity in recent years is <a target="_blank" rel="noopener noreferrer" href="https://flatgeobuf.org/">flatgeobuf</a>, a way to host a single file with complex geometries but have the client only download the geographic area it needs via http range requests, which can save a significant amount of bandwidth for large-scale interactive map experiences without the complexity of the other option: generating and hosting tiles, discussed below.</p><h2 id="map-tiles">Map Tiles</h2><p>Map tiles work by splitting up the world into square tiles based on the zoom level and coordinates, so the client downloads and renders only the tiles it needs for the map view. If you’ve used online mapping tools such as google maps and have noticed that the map tends to load in squares, those are map tiles being rendered under the hood.</p><div class="image-wrap full svelte-mg7n3x"><img loading="lazy" alt="Tiles" src="https://www.diplateevo.com/media/2023/01/tiles.gif" width="100%" class="svelte-mg7n3x">  </div><p>One of the early, popular libraries for implementing tiled maps is <a target="_blank" rel="noopener noreferrer" href="https://leafletjs.com/">leaflet</a>. Leaflet has a simple, well-documented, and extremely flexible set of tools for embedding a customizable, interactive map into a web page. Leaflet maps are still common today in many news projects. However, the go-to software stack for most web maps is <a target="_blank" rel="noopener noreferrer" href="https://www.mapbox.com/">Mapbox</a>. Mapbox allows users to host, customize, and share their own map tiles allowing so many newsrooms with fledgling graphics teams to get up and running quickly with powerful journalistic cartography.</p><p>And just as Mapbox has enabled a whole slew of journalistic cartography, <a target="_blank" rel="noopener noreferrer" href="https://maplibre.org/projects/">MapLibre</a> has been developing an open source version of MapboxGL as <a target="_blank" rel="noopener noreferrer" href="https://github.com/mapbox/mapbox-gl-js/blob/main/CHANGELOG.md#200">MapboxGL version 2 has transitioned to a not quite open source model</a>. The potential for new open source tools to even further transform the way that news organizations create maps is exciting. Tiling tools such as <a target="_blank" rel="noopener noreferrer" href="https://github.com/mapbox/tippecanoe">Tippecanoe</a>, <a target="_blank" rel="noopener noreferrer" href="https://protomaps.com/docs/pmtiles/">PMTiles</a>, and others will continue to evolve and become part of our cartography toolkits.</p><h2 id="webgl">WebGL</h2><p>Under the hood of <a target="_blank" rel="noopener noreferrer" href="https://docs.mapbox.com/mapbox-gl-js/guides/">mapboxgl.js</a> is <a target="_blank" rel="noopener noreferrer" href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">webGL</a>, a browser API that gives access to shaders that are run directly on the GPU for maximum performance in rendering to web browsers. WebGL has been used for games on the web, complex 3D modeling, and more recently cartography applications. While having all of this power to utilize the GPU allows for so much more dynamic and powerful graphics, shader code is written in a completely different paradigm than something like Javascript or Python, making it often difficult to create graphics in WebGL.</p><div class="video-wrap full svelte-i9k1x7"><video alt="video" src="/media/2023/01/webgl.mov" className="full" autoplay muted loop playsinline preload="metadata" class="svelte-i9k1x7"></video>  </div><p>So far, the most common implementation of WebGL has been these kinds of <a target="_blank" rel="noopener noreferrer" href="https://www.nytimes.com/interactive/2022/10/04/climate/south-asia-monsoon-climate-change.html">wind or weather flows</a>. But as graphics and journalistic cartography becomes an even more integral part of the newsroom workflow, I expect to see more graphics using WebGL, utilizing movement and animations for even more map detail in all sorts of areas.</p><h2 id="looking-to-2023">Looking to 2023</h2><p>As we start a new year, I’m excited to see the kinds of projects and digital cartography techniques that are published in this coming year, especially as humanity encounters climate, political, social, economic, and cultural challenges. I’m excited to continue building visualizations to accompany news stories, whether it be cartographic or otherwise.</p><p><em>Shameless plug: I am open to freelance or contract roles for this year, so if you’d like to work with me on a project, don’t hesitate to reach out!</em></p>]]></content:encoded>
            <enclosure url="https://www.diplateevo.com/images/2023/01/journalistic-cartography.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Thoughts on Twitter and Future Social Media]]></title>
            <link>https://www.diplateevo.com/twitter-future-social-media</link>
            <guid>https://www.diplateevo.com/twitter-future-social-media</guid>
            <pubDate>Thu, 08 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A reflection on too many years on Twitter.]]></description>
            <content:encoded><![CDATA[<p>I honestly don’t even remember when I signed up for Twitter. At some point in my high school years I created an account, didn’t understand the point, and simply forgot about it. Back then I was far more concerned about keeping my blog, this website, up to date with random musings and incoherent brain dumps.</p><p>Blogging was my way of reaching out to the world, and reading other people’s blogs made me feel that there was a whole community of real people on the internet, even if I never reached out directly to them. The blogosphere, so to speak, was filled with creative people sharing ideas. I spent hours configuring Wordpress themes, plugins for my website, often breaking things beyond repair. Every so often I’d receive an earnest email from someone I’d never met thanking me for something I’d written in my inbox, and I would respond to every single one of those emails.</p><p>Blogging was time consuming, but it was extremely rewarding and honestly a lot of fun. But as I started focusing on my career and getting busier with day to day errands, Twitter replaced my blogging habits. Twitter was just easier, faster, and facilitated connections seamlessly. Twitter is how I got involved with Student Voice, how I got my internship at the Department of Education, how I met many of my closest friends, and how I made the decision to move to Taiwan.</p><p>In the early 2010s, social media was fun and exciting. People made accounts often without any preconceptions of what the norms were or who was looking, allowing them to be creative and genuine with what they shared. Being free of advertisements also made social media feel more like having a conversation with a close-knit group of friends in my living room rather than trying to dodge all of the overwhelming capitalist consumerism at the mall.</p><p>Instagram is no longer where I’ll post a photo of the In-n-out burger I had for lunch, knowing that an algorithm designed to maximize commercialization and controversy means that no one will ever see the post and no one will care. Facebook has gone through so many feature changes and redesigns that I don’t even know what the point is anymore.</p><p>For a while, Twitter was the only social media I used regularly that maintained support for the organic communities that made it popular in the first place: the ability to share quick ideas and meet interesting people online. But even before the recent hostile takeover in leadership, my experience on the platform changed for the worse. Senseless arguments over political issues, people and bots shilling for crypto and NFTs, and big name personalities bullying and harassing individuals started taking up more of my feed, eroding the very reason I valued Twitter in the first place.</p><p>Is social media a reflection of what everyday people around the world are experiencing? Or are the extremes on social media perpetuating a feedback loop of driving the kind genuine people off their platforms, causing the platform to become far more extreme than the world around it? What have we learned about social media from the boom and bust of the past couple decades?</p><p>So then what is the future of social media? If becoming more connected is not more better, how can we create and sustain a social media that is minimalist and effective enough to provide the amount of local and global connection that is most effective? Thinking back to blogging, the blogosphere got a lot of these elements right: things people share should require some level of effort and accountability, and as a supplement to relationships and communities that exist apart from a digital space.</p><p>But what does this mean tangibly for my personal approach to social media? For me, I want to challenge myself to use social media more intentionally rather than aimlessly. There are certain communities on specific platforms that are worth my time, and I want to continue to be a part of those. I want to seek out individuals that are offering original content and valuable ideas. For instance, I’ve found YouTube to have a wealth of solid content creators sharing very unique, original ideas.</p><p>And while I don’t expect blogging to ever return to the level of the late 2000s, I hope to write more about random ideas and things I’m learning about, even if nobody reads it.</p>]]></content:encoded>
            <enclosure url="https://www.diplateevo.com/images/2022/12/twitter.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[In Defense of Single Page Applications]]></title>
            <link>https://www.diplateevo.com/in-defense-of-single-page-applications</link>
            <guid>https://www.diplateevo.com/in-defense-of-single-page-applications</guid>
            <pubDate>Sat, 06 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[The single page application is a flawed yet extremely useful tool for the majority of the projects that I work on.]]></description>
            <content:encoded><![CDATA[<p>In nearly a decade of building web applications, I’ve worked on both backend and frontend projects, using languages such a PHP, Python, and Javascript for projects ranging small independent business websites to large news applications. As Javascript single page applications have become more popular, debates over the role of client-side Javascript versus server-side applications often appear in developer communities.</p><p>Critics of SPAs will conclude that “Javascript is too bloated, slow, and complex” and opt for some kind of backend language or framework for better performance and ergonomics. I won’t rehash all the arguments in this article, but for the most part, I agree with them: client side Javascript comes with significant performance and usability drawbacks and there are strong reasons to avoid the single page application architecture.</p><p>However, I still default to single page applications often for a simple reason: the ability to avoid running any server-side code entirely. For the large majority of projects that I work on, being able to build the application out to static files that are hosted on a service like S3 is not only cheaper, but has fewer moving parts and is more reliable as an application that I might touch once every few years.</p><h2 id="the-pre-spa-era">The Pre-SPA Era</h2><p>Before the single page application, virtually every website required some sort of backend server. Whether it was Wordpress running on PHP, a django app, or even a simple rails website, it required some kind server always listening for requests before executing code to generate the HTML served to the user. This pattern became so common that it became a baseline: start with a backend server to host the website, and start building from there.</p><p>After building a few small projects this way, I started running into similar issues with every single project built this way: they would all eventually stop working simply due to the fact that they weren’t being actively maintained. Whether it was suddenly running out of disk space, software versions becoming too old, a sudden surprise hosting bill, or simply an application crash that didn’t automatically restart, it soon became a headache trying to fix an old project that hasn’t been touched in years, trying to remember how it was built in the first place.</p><p>We’ve become so accustomed to having a backend for every single website no matter how simple that we don’t think about how single page applications give us a chance to move the complexity to the browser, an environment that is generally much more careful about maintaining backwards compatibility than software systems used in backend infrastructure. The truth is, most websites out there don’t need a backend.</p><h2 id="backend-complexity-vs-frontend-complexity">Backend Complexity vs Frontend Complexity</h2><p>In my experience, engineers begin to get frustrated with single page applications when they simultaneously try to run a complicated backend as well as a single page application on the front-end. Except in larger corporate products, this is the case that I try to avoid the most.</p><p>By default, I usually begin all my projects as a single page application that gets built out to static HTML, CSS, and JS files and hosted on a simple file hosting such as S3, Google Cloud Storage, Github Pages, or some other static hosting service. This not only is the cheapest option, it also shortens development time by completely skipping most of the challenging DevOps details such as kubernetes, docker, etc. Especially if the project has no long-term maintenance or support plan, doing it this way is likely to be the most resilient option. Once deployed, simple statically hosted single page applications are much more likely to stay up and operational for years and years to come.</p><p>Building a site as a single page application without a running a backend server gives me far more room for dynamic, interactive content than the extremely limited options of the jQuery era, allowing me to go a lot further before needing to spin up a backend. In fact, I’ve built complete CMS systems as single page applications without running a backend at all. And while you may argue that running any single page application at all is worse in terms of download size, performance, or SEO, I think it’s more than appropriate of a tradeoff to have a low maintenance, cheap infrastructure. Compiled frontend frameworks like Svelte and the modern trend of static-site-generators make this even more attractive, as they optimize the performance and bundle sizes of single page applications.</p><p>But of course, there will be times where you cannot avoid running a backend. Whether it be a database requirement, a custom user authentication system, etc, many of these larger applications will require you to build an API and maybe even render some HTML. At this point, I’d argue that there may not be any strong advantages in favor of the single page application, and that a more traditional multi page application could be more suitable.</p><h2 id="conclusion">Conclusion</h2><p>Ultimately, I see the single page application as a flawed yet extremely useful tool for the majority of the projects that I work on. So much of the debate around single page applications has assumed a backend service as a given, and thus most of the arguments have failed to weigh the pros and cons of single page applications in light of whether a backend service needs to exist at all.</p>]]></content:encoded>
            <enclosure url="https://www.diplateevo.com/images/2022/08/single-page-app.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Betting on the Physical World]]></title>
            <link>https://www.diplateevo.com/betting-on-the-physical-world</link>
            <guid>https://www.diplateevo.com/betting-on-the-physical-world</guid>
            <pubDate>Tue, 21 Jun 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Reflections on an absurd couple of years.]]></description>
            <content:encoded><![CDATA[<p>In the past two years, significant hype in the technology industry has centered around two main developments: crypto and virtual reality. With skyrocketing inflation, political unrest, racism, violence, climate change, a pandemic, wars, and so much more, people around the world are understandably disillusioned with our societal machinery and are looking for anything to come along and disrupt the status quo. Both crypto and virtual reality represent visions of leaving behind the world as we know it and creating some future that is less dependent on or completely independent from existing political, cultural, and physical systems.</p><p>I won’t make any predictions about what will emerge out of this turbulent period of history, whether anarchical systems take hold or humans find a way to fix and recover the trust in our institutions and leaders is outside my control. When humans look back at this era of human civilization, how will they talk about social media, cryptocurrencies, or our global and domestic politics?</p><p>Reading through The Atlantic’s essay on the <a target="_blank" rel="noopener noreferrer" href="https://www.theatlantic.com/magazine/archive/2022/05/social-media-democracy-trust-babel/629369/">uniquely stupid decade in American life</a>, I find the diagnostic of everything wrong with our society to be paralyzing. Moving back to the states after nearly three years abroad, it’s hard to describe how different things feel now, even though much of my immediate hometown feels, on the surface, identical to how I left it. My parents and the largely Asian-immigrant population in San Jose seem more on edge after violent acts toward Asians, even going so far to amplify anti-Black or anti-Mexican attitudes of the far right.</p><p>Additionally, gun violence continues to be unsolvable as children and adults are senselessly murdered in a country that somehow believes owning assault weapons is a fundamental human right, invoking debates on the second amendment, thoughts and prayers, and further inaction. As a technologist, these issues not only reveal to me what is broken about our society, but also that our problems cannot be solved through technology alone.</p><p>In the past few years, I’ve examined issues such as climate change, elections, and more from the perspective of a data journalist, crunching numbers and making graphics to better understand news events. Looking at so many disasters beyond our control has revealed to me why we feel so burnt-out, unmotivated, and defeated. Maybe the way that we’ve oriented our ambitions and careers haven’t done much to address our physical world with human-centered solutions. No matter how much we improve and advance our technology, digital tools, and internet societies, our physical world will continue to be the most important investment in our future. There’s no shortcut around investing in sustainable energy, education, public health, and civic society the way we have done for decades.</p><p>Don’t get me wrong, I get excited about large, ambitious visions promising big change in short time-frames as much as anyone else, but as I’ve gotten older I’ve also begun to recognize how small, often low-tech changes are the most reliable way of tangibly affecting change. Traditional institutions such as newspapers and governments, as flawed as they are, still have a lot more influence and stability than the startups and experiments of those living on the cutting edge.</p><p>That’s why I’ve decided to pursue cartography and geographic information systems in order to help better address issues including managing our land, resources, and waste. Some of the most oldest problems facing humanity include the way that we manage our land and natural resources, making the potential applications for better geospatial tools endlessly important. Geospatial visualizations provide journalists with better ways of telling news stories, especially when used in stories that explore vast amounts of data such as politics, climate change, or other socio-economic issues.</p><p>But beyond that, I’ll be looking for more ways to give back to my communities whether it be the people in my neighborhood, industry, or complete strangers, doing what I can to help others be successful.</p>]]></content:encoded>
            <enclosure url="https://www.diplateevo.com/images/2022/06/ocean.jpg" length="0" type="image/jpg"/>
        </item>
    </channel>
</rss>